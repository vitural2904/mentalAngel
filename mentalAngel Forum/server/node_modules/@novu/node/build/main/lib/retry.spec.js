"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var nock_1 = __importDefault(require("nock"));
var index_1 = require("../index");
var retry_1 = require("./retry");
var BACKEND_URL = 'http://example.com';
var TOPICS_PATH = '/v1/topics';
var TRIGGER_PATH = '/v1/events/trigger';
jest.setTimeout(15000);
var hasAllEqual = function (arr) { return arr.every(function (val) { return val === arr[0]; }); };
var hasUniqueOnly = function (arr) {
    return Array.from(new Set(arr)).length === arr.length;
};
var NetworkError = (function (_super) {
    __extends(NetworkError, _super);
    function NetworkError(code) {
        var _this = _super.call(this, 'Network Error') || this;
        _this.code = code;
        return _this;
    }
    return NetworkError;
}(Error));
var HttpError = (function (_super) {
    __extends(HttpError, _super);
    function HttpError(status) {
        var _this = _super.call(this, 'Http Error') || this;
        _this.response = { status: status };
        return _this;
    }
    return HttpError;
}(Error));
describe('Novu Node.js package - Retries and idempotency-key', function () {
    afterEach(function () {
        nock_1.default.cleanAll();
        nock_1.default.enableNetConnect();
    });
    var novu = new index_1.Novu('fake-key', {
        backendUrl: BACKEND_URL,
        retryConfig: {
            retryMax: 3,
            waitMax: 0.5,
            waitMin: 0.2,
        },
    });
    it('should retry trigger and generate idempotency-key only once for request', function () { return __awaiter(void 0, void 0, void 0, function () {
        var idempotencyKeys, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    idempotencyKeys = [];
                    (0, nock_1.default)(BACKEND_URL)
                        .post(TRIGGER_PATH)
                        .times(3)
                        .reply(function (_url, _body) {
                        idempotencyKeys.push(this.req.getHeader('idempotency-key'));
                        return [500, { message: 'Server Exception' }];
                    });
                    (0, nock_1.default)(BACKEND_URL)
                        .post(TRIGGER_PATH)
                        .reply(201, { acknowledged: true, transactionId: '1003' });
                    return [4, novu.trigger('fake-workflow', {
                            to: { subscriberId: '123' },
                            payload: {},
                        })];
                case 1:
                    result = _a.sent();
                    expect(hasAllEqual(idempotencyKeys)).toEqual(true);
                    expect(result.status).toEqual(201);
                    expect(result.request.headers['idempotency-key']).toBeDefined();
                    return [2];
            }
        });
    }); });
    it('should generate different idempotency-key for each request', function () { return __awaiter(void 0, void 0, void 0, function () {
        var idempotencyKeys, i, result;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    (0, nock_1.default)(BACKEND_URL)
                        .post(TRIGGER_PATH)
                        .reply(500, { message: 'Server Exception' });
                    (0, nock_1.default)(BACKEND_URL)
                        .post(TRIGGER_PATH)
                        .times(10)
                        .reply(201, { acknowledged: true, transactionId: '1003' });
                    idempotencyKeys = [];
                    i = 0;
                    _b.label = 1;
                case 1:
                    if (!(i < 10)) return [3, 4];
                    return [4, novu.trigger('fake-workflow', {
                            to: { subscriberId: '123' },
                            payload: {},
                        })];
                case 2:
                    result = _b.sent();
                    idempotencyKeys.push((_a = result.request) === null || _a === void 0 ? void 0 : _a.headers['idempotency-key']);
                    _b.label = 3;
                case 3:
                    i++;
                    return [3, 1];
                case 4:
                    expect(hasUniqueOnly(idempotencyKeys)).toEqual(true);
                    return [2];
            }
        });
    }); });
    it('should retry on status 422 and regenerate idempotency-key for every retry', function () { return __awaiter(void 0, void 0, void 0, function () {
        var idempotencyKeys, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    idempotencyKeys = [];
                    (0, nock_1.default)(BACKEND_URL)
                        .post(TRIGGER_PATH)
                        .times(3)
                        .reply(function () {
                        idempotencyKeys.push(this.req.getHeader('idempotency-key'));
                        return [422, { message: 'Unprocessable Content' }];
                    });
                    (0, nock_1.default)(BACKEND_URL)
                        .post(TRIGGER_PATH)
                        .reply(201, { acknowledged: true, transactionId: '1003' });
                    return [4, novu.trigger('fake-workflow', {
                            to: { subscriberId: '123' },
                            payload: {},
                        })];
                case 1:
                    result = _a.sent();
                    expect(hasUniqueOnly(idempotencyKeys)).toEqual(true);
                    expect(result.status).toEqual(201);
                    expect(result.request.headers['idempotency-key']).toBeDefined();
                    return [2];
            }
        });
    }); });
    it('should retry getting topics list', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .times(3)
                        .reply(500, { message: 'Server Exception' });
                    (0, nock_1.default)(BACKEND_URL).get(TOPICS_PATH).reply(200, [{}, {}]);
                    return [4, novu.topics.list({})];
                case 1:
                    result = _a.sent();
                    expect(result.status).toEqual(200);
                    expect(result.request.headers['idempotency-key']).toBeUndefined();
                    return [2];
            }
        });
    }); });
    it('should fail after reaching max retries', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .times(4)
                        .reply(500, { message: 'Server Exception' });
                    (0, nock_1.default)(BACKEND_URL).get(TOPICS_PATH).reply(200, [{}, {}]);
                    return [4, expect(novu.topics.list({})).rejects.toMatchObject({
                            response: { status: 500 },
                        })];
                case 1:
                    _a.sent();
                    return [2];
            }
        });
    }); });
    var NON_RECOVERABLE_ERRORS = [
        [400, 'Bad Request'],
        [401, 'Unauthorized'],
        [403, 'Forbidden'],
        [404, 'Not Found'],
        [405, 'Method not allowed'],
        [413, 'Payload Too Large'],
        [414, 'URI Too Long'],
        [415, 'Unsupported Media Type'],
    ];
    test.each(NON_RECOVERABLE_ERRORS)('should not retry on non-recoverable %i error', function (status, message) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, nock_1.default)(BACKEND_URL).get(TOPICS_PATH).times(3).reply(status, { message: message });
                    (0, nock_1.default)(BACKEND_URL).get(TOPICS_PATH).reply(200, [{}, {}]);
                    return [4, expect(novu.topics.list({})).rejects.toMatchObject({
                            response: { status: status },
                        })];
                case 1:
                    _a.sent();
                    return [2];
            }
        });
    }); });
    it('should retry on various errors until it reach successful response', function () { return __awaiter(void 0, void 0, void 0, function () {
        var novuClient, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .reply(429, { message: 'Too many requests' });
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .reply(408, { message: 'Request Timeout' });
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .replyWithError(new NetworkError('ECONNRESET'));
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .replyWithError(new NetworkError('ETIMEDOUT'));
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .replyWithError(new NetworkError('ECONNREFUSED'));
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .reply(504, { message: 'Gateway timeout' });
                    (0, nock_1.default)(BACKEND_URL)
                        .get(TOPICS_PATH)
                        .reply(422, { message: 'Unprocessable Content' });
                    (0, nock_1.default)(BACKEND_URL).get(TOPICS_PATH).reply(200, [{}, {}]);
                    novuClient = new index_1.Novu('fake-key', {
                        backendUrl: BACKEND_URL,
                        retryConfig: {
                            initialDelay: 0,
                            waitMin: 0.2,
                            waitMax: 0.5,
                            retryMax: 7,
                        },
                    });
                    return [4, novuClient.topics.list({})];
                case 1:
                    result = _a.sent();
                    expect(result.status).toEqual(200);
                    return [2];
            }
        });
    }); });
    describe('defaultRetryCondition function', function () {
        test.each(NON_RECOVERABLE_ERRORS)('should return false when HTTP status is %i', function (status) {
            var err = new HttpError(status);
            expect((0, index_1.defaultRetryCondition)(err)).toEqual(false);
        });
        test.each(retry_1.RETRYABLE_HTTP_CODES)('should return true when HTTP status is %i', function (status) {
            var err = new HttpError(status);
            expect((0, index_1.defaultRetryCondition)(err)).toEqual(true);
        });
        it('should return true when HTTP status is 500', function () {
            var err = new HttpError(500);
            expect((0, index_1.defaultRetryCondition)(err)).toEqual(true);
        });
        it('should return true when network code is ECONNRESET', function () {
            var err = new NetworkError('ECONNRESET');
            expect((0, index_1.defaultRetryCondition)(err)).toEqual(true);
        });
        it('shoud return false on unknown error', function () {
            var err = new Error('Unexpected error');
            expect((0, index_1.defaultRetryCondition)(err)).toEqual(false);
        });
    });
    describe('hasAllEqual helper function', function () {
        it('should return true when all items are equal', function () {
            var arr = ['a', 'a', 'a', 'a'];
            expect(hasAllEqual(arr)).toEqual(true);
        });
        it('should return false when items are not equal', function () {
            var arr = ['a', 'b', 'b', 'b'];
            expect(hasAllEqual(arr)).toEqual(false);
        });
    });
    describe('hasUniqueOnly helper function', function () {
        it('should return true when all items are unique', function () {
            var arr = ['a', 'b', 'c', 'd'];
            expect(hasUniqueOnly(arr)).toEqual(true);
        });
        it('should return false when items are not unique', function () {
            var arr = ['a', 'a', 'c', 'd'];
            expect(hasUniqueOnly(arr)).toEqual(false);
        });
    });
});
